{
  "info": {
    "_postman_id": "2153877c-a5b8-4cec-805e-fbe693a34745",
    "name": "Contract Testing",
    "description": "# About this collection\n\nThis collection helps you set up contract tests to ensure that two separate systems are compatible and can communicate with one another.\n\n## **Using the collection**\n\n**Step 1:** Send the sample requests and view the response and test results.\n\n**Step 2:** Replace the sample request URLs with your desired API endpoints.\n\n**Step 3:** Customize the tests in the \"Tests\" tab if needed. Don't forget to save your changes.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "38975656"
  },
  "item": [
    {
      "name": "Test Response",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Validate that the response code should be 200",
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "// Validate that the response is json object",
              "pm.test(\"Response is a json object\", function () {",
              "    pm.expect(pm.response.json()).to.be.an('object');",
              "});",
              "",
              "// Validate that the response has an arg object",
              "pm.test(\"Response to have 'arg' object\", function () {",
              "    pm.expect(pm.response.json()).to.have.property('args');",
              "});",
              "",
              "// Validate that the response has headers object",
              "pm.test(\"Response to have 'headers' object\", function () {",
              "    pm.expect(pm.response.json()).to.have.property('headers');",
              "});",
              "",
              "// Validate that the response has url property",
              "pm.test(\"Response to have 'url' property\", function () {",
              "    pm.expect(pm.response.json()).to.have.property('url');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "PUT",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"name\": \"Bergen hostal\"\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "https://1e8e-178-232-85-127.ngrok-free.app/BookingDAO/rest/properties/38",
          "protocol": "https",
          "host": [
            "1e8e-178-232-85-127",
            "ngrok-free",
            "app"
          ],
          "path": [
            "BookingDAO",
            "rest",
            "properties",
            "38"
          ]
        },
        "description": "The tests in this request validate that:\n- the response code is 200\n- the response is a JSON object\n- the response has an 'arg' object\n- the response has 'headers' object\n- the response has a 'url' property"
      },
      "response": []
    },
    {
      "name": "Check for Valid Query Params",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Response Code should be 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Content-Type should be JSON\", function () {",
              "    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json; charset=utf-8');",
              "});",
              "const json = pm.response.json();",
              "pm.test(\"`args` should contain the correct query params\", function () {",
              "    pm.expect(json.args).to.be.an('object');",
              "    pm.expect(json.args.foo).to.eql('bar');",
              "    pm.expect(json.args.baz).to.eql('value');",
              "});",
              "pm.test(\"Date in the header should be valid\", function () {",
              "    const parsedDate = new Date(pm.response.headers.get('Date'));",
              "    pm.expect(parsedDate).to.be.a('date');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/get?foo=bar&baz=value",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "get"
          ],
          "query": [
            {
              "key": "foo",
              "value": "bar"
            },
            {
              "key": "baz",
              "value": "value"
            }
          ]
        },
        "description": "Tests that the response contains valid query parameters."
      },
      "response": []
    },
    {
      "name": "Check for Valid Form Data",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const json = pm.response.json();",
              "pm.test(\"`form` should contain the correct form data\", function () {",
              "    pm.expect(json.form).to.be.an('object');",
              "    pm.expect(json.form.foo1).to.eql('bar1');",
              "    pm.expect(json.form.foo2).to.eql('bar2');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "foo1",
              "value": "bar1",
              "type": "text"
            },
            {
              "key": "foo2",
              "value": "bar2",
              "type": "text"
            }
          ]
        },
        "url": {
          "raw": "{{baseUrl}}/post",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "post"
          ]
        },
        "description": "The tests in this request validate that the request body sent as form-data is valid."
      },
      "response": []
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://postman-echo.com"
    }
  ]
}
